import { input } from "./input";

type TreeNode = {
    id: number;
    neighbours: Record<string, number>;
};

type Nodes = Record<number, TreeNode>;

type Presents = Record<number, number>;

const createNode = (nodes: Nodes) => {
    const id = Object.keys(nodes).length;
    const node = {
        id,
        neighbours: {
            "^": -1,
            "<": -1,
            v: -1,
            ">": -1,
        },
    };
    nodes[id] = node;
    return node;
};

const oppositeDirections: Record<string, string> = {
    ">": "<",
    "<": ">",
    "^": "v",
    v: "^",
};

const assignment1 = () => {
    const nodes: Nodes = {};
    const presents: Presents = {};

    createNode(nodes);

    let currentNodeId = Object.keys(nodes)[0] ? Number(Object.keys(nodes)[0]) : 0;

    const route = input.split("");

    for (let i = 0; i < route.length; i++) {
        const direction = route[i];

        const currentNode: TreeNode = nodes[currentNodeId];

        console.log(currentNode);
        console.log(direction);

        let neighbourNodeId;
        if (currentNode.neighbours[direction] > -1) {
            neighbourNodeId = currentNode.neighbours[direction];
        } else {
            const neighbourNode = createNode(nodes);
            const oppositeDirection = oppositeDirections[direction] as "^" | "<" | "v" | ">";
            currentNode.neighbours[direction] = neighbourNode.id;

            neighbourNode.neighbours[oppositeDirection] = currentNodeId;
            neighbourNodeId = neighbourNode.id;
        }

        presents[currentNodeId] = presents[currentNodeId] ? presents[currentNodeId] + 1 : 1;
        presents[neighbourNodeId] = presents[neighbourNodeId] ? presents[neighbourNodeId] + 1 : 1;
        currentNodeId = neighbourNodeId;
    }

    const atLeastOne = Object.values(presents).filter((a) => a > 0).length;

    return atLeastOne;
};

const Day = () => {
    return (
        <main>
            <p>Part 1: {assignment1()}</p>
        </main>
    );
};

export default Day;
